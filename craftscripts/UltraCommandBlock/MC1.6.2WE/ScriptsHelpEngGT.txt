UltraCommandBlock

Global script for working with command blocks. As an added bonus includes convenient stacking.
IMPORTANT: It works ONLY with cuboid type selections! It doesn’t work with the rest (except for one command, it will be indicated in its description).
VERY IMPORTANT: text changes inside command blocks are not canceled by the command //undo! This is a feature of WE, I can’t fix it, so think before any global action, so as not to make mistakes!
Commands in the script:
//cs UltraCommandBlock /fill <text> [space_str] - fill all command blocks in the selection with the text <text>. Important: if there are spaces in your text, then they MUST be replaced with any line /character (at your request, WITHOUT spaces) and specify it as space_str.
Examples:
//cs UltraCommandBlock /fill Hello
//cs UltraCommandBlock /fill /tp ___ @ a [x = 1, y = 2, z = 3, r = 4] ___ 5___6___7 ___
//cs UltraCommandBlock /fill /tpTHISISSPACE @ a [x = 1, y = 2, z = 3, r = 4] THISISSPACE5THISISSPACE6THISISSPACE7 THISISSPACE

//cs UltraCommandBlock /replace <text1> <text2> [space_str] - replace <text1> with <text2> in all command blocks in the selection. Important: if there are spaces in your text, then they MUST be replaced with any line /character (at your request, WITHOUT spaces) and specify it as space_str.
Examples:
//cs UltraCommandBlock /replace Hello Hi
//cs UltraCommandBlock /fill Hello Go $ home! $
//cs UltraCommandBlock /fill Hello, _SPACE_friends! Go_SPACE_home! _SPACE_

//cs UltraCommandBlock /clear - clears all command blocks in the selection.
I will not even write examples of use, because it is only one :)

//cs UltraCommandBlock /version - find out the version of the script.
//cs UltraCommandBlock /author - read about the author of the script.
//cs UltraCommandBlock /testerror - check for errors in command blocks inside the selection. Indicates the error itself and the coordinates of the command block with the error. It also warns of empty command blocks.

The following commands make up the main functionality of this script.
//cs UltraCommandBlock /stack - stack allocation.
Detailed help: //cs UltraCommandBlock /stack /?
//cs UltraCommandBlock /stack <number_of_stack> <mask> [flag]
number_of_stack - how many times to stack.
mask - stacking mask. Needed to fill command blocks during stacking. If we do not want to touch the command blocks, or if they are not in the selection, we write /no.
Stack mask format: NAME_PARAM_1 = VALUE_PARAM_1! STEP_PARAM_1; NAME_PARAM_2 = VALUE_PARAM_2! STEP_PARAM_2; ...
Example of a stacking mask: SuperX = 1! 2; SuperXX = 34! 45; SuperXXX = 56! 89; Yahoo = 45! 23;
Now let's figure out why we need a stacking mask and how it is used. Inside command blocks, we can use variables.
Example command block with variables: /tp @a $ SuperX $ $ SuperXX $ $ SuperXXX $
As you can see, a variable can have any name, but to show that it is a variable, we enclose it in $ signs. Those. it looks like this: $ NAME $
Moreover, the script is not interested in what exactly is written there. There may be any text, not necessarily commands. For example (text in the command block): Ya lublu gulyat $ NNN $ raz
And the mask tells us the following: the initial value of the variable and its step when stacked.
The initial value is the variable itself in the original selection. Each stacking step adds the indicated second value to this variable. That is, the mask x = 1! 1; sets the variable x in the initial selection 1, in the first stage of stack 2, in the second stage of stack 3, and so on. There can be any number of variables. Also, of course, if the variable is not specified in the mask, it will be copied in the original format. Those. you can first stack one way, changing only one variable, then stack up, for example, changing the second variable, and so on. This can be seen in more detail in the video.
Example:
//cs UltraCommandBlock /stack 58 SuperX = 1! 2; SuperXX = 34! 45; SuperXXX = 56! 89; Yahoo = 45! 23;
But with such stacking, the variables in the initial selection do not change. That they changed - it is necessary to put a flag /a. To not change - flag /f. It is very important. If you change the variables in the initial selection, you will not be able to return them there automatically, only by hand, since //undo does not cancel the changes inside the command blocks.
Examples:
//cs UltraCommandBlock /stack 58 x = 1! 1; /a
//cs UltraCommandBlock /stack 58 x = 1! 1; /f
//cs UltraCommandBlock /stack 58 /no /a
//cs UltraCommandBlock /stack 58 /no /f
If the mask is /no, then this flag does not make sense (/f or /a).
After that, you can also set the direction flag (if not set, there, where we look).
/n - north
/w - west
/e - east
and so on, by the first letter of the direction.
Example: //cs UltraCommandBlock /stack 58 /no /f /u - stack up, there is no mask.
Example: //cs UltraCommandBlock /stack 58 x = 1! 4; /f /d - run down, x from 1 in increments of 4, nothing changes in the original selection.
But the question arises - why do we need this stack WITHOUT a mask, if there is a regular WE stack?
The fact is that there are two more parameters.
The first after the direction is the shift vector for the stack. Each stack will shift the stacked element on this vector. The default shift vector is 0.0.0.
Example usage: //cs UltraCommandBlock /stack 58 x = 1! 4; /f /d 0, -1.0 - stack down, x from 1 in increments of 4, nothing changes in the original selection, with a stack, each step shifts one block down, i.e. between the "large" blocks that are stacked, there will be a distance of one block. More details are shown in the video.
And the second parameter is blocks for stacking.
There are two possible options - indicate which blocks to stack or indicate which blocks do not stack.
+: id1, id2, ... - stack ONLY blocks with id1, id2, ...
-: id1, id2, ... - stack ALL blocks except those with id1, id2, ...
The second parameter id is supported, i.e. 35: 3 - wool of a certain color.
Also, if we want, for example, to immediately cover ALL wool, we write 35: -1, i.e. the second -1 means that we take all possible modifications to the block.
If you are working with air, it is strongly recommended to write 0: -1 due to minecraft map generation errors, I saw air blocks with various second parameters.
Examples:
//cs UltraCommandBlock /stack 58 x = 1! 4; /a /s 0, -1.0 +: 35: -1 - run 58 times to the south, the mask is entered, in the initial selection the variables also change to their values, the shift vector down one block each time, run ONLY the wool (ALL )
//cs UltraCommandBlock /stack 58 x = 1! 4; /a /s 0, -1.0 +: 35 - run 58 times to the south, the mask is entered, in the initial selection the variables also change to their values, the shift vector is down one block each time, we run ONLY WHITE wool (NOT ALL) .
//cs UltraCommandBlock /stack 58 x = 1! 4; /a /s 0, -1.0 +: 35.12 - run 58 times to the south, the mask is entered, in the initial selection the variables also change to their values, the shift vector down one block each time, run ONLY WHITE wool (NOT ALL) and sand.
//cs UltraCommandBlock /stack 58 x = 1! 4; /a /s 0, -1.0 -: 35.12 - run 58 times to the south, the mask is entered, in the initial selection the variables also change to their values, the shift vector down one block each time, run everything except WHITE wool (and other colors we knock!) and sand.
//cs UltraCommandBlock /stack 58 x = 1! 4; /a /s 0, -1.0 -: 35.12 - run 58 times south, the mask is entered, in the initial selection the variables also change to their values, the shift vector down one block each time, we run everything except ANY wool and sand.
---
//cs UltraCommandBlock /fix and //cs UltraCommandBlock /unfix
Two commands for working with absolute and relative coordinates.
/fix - "fixes" the selection in the world, i.e. all coordinates (EXCEPT those that are inside square brackets!) converts to absolute.
/unfix - performs the "unfixing" of the selection in the world, i.e. all coordinates (EXCEPT those that are inside square brackets!) converts to relative.
Example:
With /unfix, a command in a command block of the form /tp @p [x = 1, y = 2, z = 3, r = 4] 1 2 3 is converted to /tp @p [x = 1, y = 2, z = 3 , r = 4] <x> <y> <z>, where that in <> brackets are relative coordinates (and vice versa, with /fix - in absolute)
With such actions, the design will remain operational. But in any case it will be impossible to move it anyway, because there are still square brackets, in them the coordinates can refer to other parts inside the mechanism, when moving these coordinates will all refer to the same places in the WORLD. To do this, there is a flag /all (for both teams) - it does the same, but also in square brackets. Minecraft does NOT support relative coordinates in square brackets, so when using /unfix /all for the mechanism to work after moving, it is MANDATORY to execute /fix /all on it. More details are shown in the video.

//cs UltraCommandBlock /createtemplate
Well, the last team remained, which is still under development. This command works with any type of selection. We select something and we create a set of command blocks by mask (so far 4 variables are available - $ x $, $ y $, $ z $ and $ block_id $, which correspond to the coordinates of the block in question from the selection and its id), which we wrote down into the command block on which they stood. Everything is shown in detail in the video. I will not describe in detail, since the team has not been finalized.
Examples:
//cs UltraCommandBlock /createtemplate
//cs UltraCommandBlock /createtemplate +: 12.34.56
//cs UltraCommandBlock /createtemplate -: 12,34,56

Also in this script, an ad is displayed once a day, which indicates the creators of the script and gives their coordinates for communication.
The plans: revision /createtemplate, on version 1.7, the creation of functionality for working with trolleys with command blocks (their spawn, filling, and so on).




